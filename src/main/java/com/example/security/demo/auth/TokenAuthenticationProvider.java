package com.example.security.demo.auth;

import java.util.Collections;
import java.util.logging.Logger;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Component;

import com.example.security.demo.entity.UserInfoEntity;
import com.example.security.demo.repository.UserInfoRepository;

/**
 * 提供驗證過程
 * @author user
 */
@Component
public class TokenAuthenticationProvider implements AuthenticationProvider {
		
	private Logger LOG = Logger.getLogger(TokenAuthenticationProvider.class.getName());
	
	/**
	 * 使用者帳號資料庫
	 */
	@Autowired
	private UserInfoRepository userInfoRepository;

	/**
	 * 由某處設定將客製化的Authentication物件傳進來
	 */
	@Override
	public Authentication authenticate(Authentication authentication) throws AuthenticationException {
		LOG.info("TokenAuthenticationProvider authenticate......");
		// extracting credentials from user.	
		String name = authentication.getName();
		String password =  ((TokenAuthentication)authentication).getCredentials();
		authentication.getAuthorities();
		
		
		// checking if the user is available. In general, checking if the user is exist in the repository.
		UserInfoEntity userInfoEntity = userInfoRepository.getUserByName(name);
		
		// 1.0 when the user is invalid, throwing an exception.
		if(userInfoEntity == null) {
			throw new UsernameNotFoundException("the user is invalid");
		}
		
		// 2.0 when the user is valid
		// 2_1 creating a new Authentication object
		// 2_2 setting a token which is generated by jwtService and Authentication object.		 
		return new UsernamePasswordAuthenticationToken(name,password,Collections.emptyList());
//		return  authentication;
	}

	/**
	 * The “supports” method tells Spring’s AuthenticationManager what class of input Authentication this provider is capable of processing.
	 */
	@Override
	public boolean supports(Class<?> authentication) {
		return authentication.equals(TokenAuthentication.class);
	}


}
